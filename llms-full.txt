# Product Features Summary

## Maybe AI Product Requirements Document (August 2025 Update)

### 1. Product Repositioning

#### 1.1 Core Differentiation
**Maybe AI: Business Data Workflow Automation Expert**  
Instead of building a general AI assistant, we focus on solving one core problem: Enable prosumers to describe their data needs in natural language and automatically complete the full "acquire → analyze → act" business cycle.

#### 1.2 Upgraded Technology Moats
- **Maybe Crawler**: Natural language-based intelligent web scraper that acquires any website data based on user descriptions.
- **Intelligent Planning Engine**: Collaborative architecture of intent recognition + plan generation + tool invocation.
- **Workflow Solidification Mechanism**: Automatically saves successful experiences as reusable intelligent solutions.
- **MCP Ecosystem Extension**: Standard calls and short-circuit calls coexist, balancing stability and efficiency.
- **Self-Learning Capability**: Continuously optimizes with each execution; user's dedicated solutions evolve persistently.

#### 1.3 Upgraded Value Proposition
- **For Users**: Describe data needs and get self-evolving dedicated intelligent solutions.
- **For Industry**: Upgrade from "AI chat tools" to "self-learning business intelligence systems".
- **Business Model**: Charge based on intelligence level and business value, not usage frequency.

### 2. Current System Architecture

#### 2.1 Multi-Module Collaborative Architecture
**Core Philosophy**: Explore with intelligent planning, solidify with Workflows; continuous optimization forms a closed loop.  
**System Modules**:
- **Intent Recognition Module**: Understand complex user business needs.
- **Plan Generation Module**: Formulate optimal execution strategies.
- **Tool Invocation Module**: Execute specific tasks.
- **Learning Solidification Layer**: Solidify successful experiences into reusable processes.

#### 2.2 Maybe Crawler's Role in Current Architecture
- **As MCP Tool**: Standardized data acquisition service called by the tool invocation module.
- **As Intelligent Module**: Possesses natural language understanding and crawling strategy generation capabilities.
- **As Workflow Component**: Successful crawling processes can be solidified into reusable data acquisition solutions.

**Workflow**:
1. Intent recognition module parses user data acquisition needs.
2. Plan generation module formulates crawling strategy and execution plan.
3. Tool invocation module calls Maybe Crawler (MCP or short-circuit).
4. After successful execution, the entire process can be solidified into Workflow.

#### 2.3 Architecture Evolution Planning
- **Current Stage**: Single system with multiple modules, focusing on core experience refinement.
- **Mid-term Evolution**: Workflow mutual invocation mechanism, agent calling workflows.
- **Long-term Vision**: Complete Agent-Workflow bidirectional calling ecosystem.

### 3. Target Users and Scenarios

#### 3.1 Precise User Personas
- **Core Users**: Business personnel who "live in spreadsheets".
  - **Marketing Specialists (40%)**
  - **Sales Personnel (30%)**
  - **Financial Analysts (20%)**
  - **Investment Personnel (10%)**

#### 3.2 Business Scenario Evolution Examples
- **Scenario 1**: Complete Evolution of Competitor Price Monitoring.
- **Scenario 2**: Investment Project Screening Capability Accumulation.
- **Scenario 3**: Intelligent Collaboration in Complex Business Scenarios.

### 4. Product Feature Modules

#### 4.1 Intent Recognition Module Upgrade
- From Function Recognition to Business Understanding.

#### 4.2 Plan Generation Module Upgrade
- From Technical Planning to Value Planning.

#### 4.3 Tool Invocation Module Upgrade
- Intelligent Invocation Strategy.

#### 4.4 Workflow Solidification System
- Intelligent Solidification Mechanism.
- Version Iteration Mechanism.

### 5. August Iteration Breakthrough Plan

#### 5.1 Product Validation Focus
- **Week 1**: Core Value Hypothesis Validation.
- **Week 2**: Core Scenario Deep Refinement.
- **Week 3**: Complex Collaboration Value Validation.
- **Week 4**: User Retention and Habit Formation.

#### 5.2 Key Product Decisions
- Decision 1: When to suggest users save solutions?
- Decision 2: How to help users understand solution value?
- Decision 3: How to balance automation and user control?
- Decision 4: MCP calls vs short-circuit calls selection strategy?

### 6. Risk Control and Response

#### 6.1 Product Experience Risks
- User Cognition Risk.
- Complexity Management Risk.
- Expectation Management Risk.

#### 6.2 Technical Implementation Risks
- System Module Collaboration Complexity.
- MCP Calls vs Short-circuit Calls Consistency.
- Workflow Solidification Quality Control.

#### 6.3 Commercialization Risks
- User Payment Willingness.

### 7. Success Metrics Definition

#### 7.1 Product Metrics
- Solution Save Rate.
- Solution Reuse Rate.
- Solution Evolution Perception.

#### 7.2 User Experience Metrics
- First-time Success Rate.
- Learning Curve.
- User Retention.

#### 7.3 Technical Metrics
- MCP Call Success Rate.
- Short-circuit Call Response Time.
- Solution Execution Stability.

#### 7.4 Business Metrics
- Paid Conversion Rate.
- ARPU.
- User Lifetime Value.

### 8. Business Model Design

#### 8.1 Pricing Strategy
- Value-based Pricing, Not Usage-based.
- Tiered Pricing.

#### 8.2 Growth Strategy
- C2B Customer Acquisition Model.
- Viral Growth.

### 9. Competitive Moat Building

#### 9.1 Data Moat
- Accumulate data acquisition experience across industries.

#### 9.2 User Stickiness
- Historical data asset binding.

#### 9.3 Technical Barriers
- Natural language to execution plan conversion.

**Core Product Philosophy**: Maybe AI enables users to upgrade from "using AI tools" to "owning dedicated intelligent solutions." Each solution learns the user's business logic and personal preferences; the system continuously optimizes execution efficiency, and the entire solution set evolves constantly. User success comes from "I own a set of intelligent solutions that understand my business," not "I learned to use a complex tool."

---


# Tech Stack

**Architect:** [ProcessOn Link](https://www.processon.com/view/link/68466857fd036b1f4260e9b1?cid=68466822170d3978c9ff2c54)

- Key agent framework using Autogen (in `fastest-api` folder)
- MCPTool for tool calls (in `omnimcp-be` and `omnimcp-api-proxy` folder)
- User chat interface and agent studio (build and test app/agent) (in `fastest-playground` folder)
- Deployment architecture

- workflow for user chat
use disptch to find best match agent/app
 - if not found, will replan , find tools to answer the question
    - if still could not planned agents will use research agent with search tool(google/perplexity/twitter search tool) try to satifsfy user's query


## Tool Knowledge Challenges

- **Issue:** 
  - Tool knowledge is managed separately for agent creation and runtime, causing inefficiencies and mismatches (e.g., tools not aligning with use cases).

- **Action:** 
  - Merge tool knowledge into a unified framework using structured schemas (e.g., triplets, tags) stored in a scalable database (e.g., MongoDB, graph database). Integrate with agent creation and runtime for consistent tool selection.

- **Status:** 
  - On hold, pending further discussion.

## Conclusion

OmniMCP.ai combines V0’s rapid creation, Wordware’s accessible interface, and Websim’s sharing capabilities to build a Web3 agent platform. Compared to UniQ, it lags in tool reliability, agent stability, and dashboard integration. Critical issues include stabilizing agent execution, improving tool reliability, and enhancing dashboard support. Key improvements needed are runtime chart generation, private data automation, and unified tool knowledge management. Prioritizing these will align OmniMCP closer to UniQ’s benchmark and enhance user experience for builders and users.

---
  
## Building Agent Page (Playground Interface)
The "Building Agent" page in MAYBE.ai’s Playground provides an intuitive, interactive environment for users to create, configure, and test AI agents tailored for Web3 and crypto-focused tasks. This page is designed for both technical and non-technical users, supporting rapid prototyping and deployment of agents.
Key Features
Agent Creation & Configuration:
Users can define new agents by specifying their name, description, and core prompt. The prompt editor supports detailed role and workflow instructions, enabling precise agent behavior customization.
Tool Selection:
The interface allows users to select and integrate tools (APIs, data sources, or internal functions) that the agent can use. Tools are presented with clear input/output schemas and sample use cases to guide selection.
Versioning & Plan Generation:
Each agent can have multiple versions. The system can auto-generate execution plans based on user intent, ensuring the agent is equipped with the right tools and logic.
Test Run Panel:
Users can interactively test the agent by entering sample queries. The right panel displays the agent’s response, including formatted outputs, summaries, and actionable insights.
Prompt & Workflow Editing:
The prompt section supports Markdown formatting, making it easy to structure role descriptions, goals, and step-by-step workflows for the agent.
Related Suggestions:
The interface provides suggestions for feature enhancements, such as language selection, metadata retrieval, or improved transcript formatting, to inspire further agent development.
Social Sharing & Access Control:
Agents can be saved, shared, or set to private, supporting collaborative development and controlled deployment.
Example Use Case
For instance, the "YouTubeTranscriptRetriever" agent is configured to fetch and format YouTube video transcripts. The workflow is clearly outlined in the prompt, and users can test the agent by providing a YouTube URL or ID, immediately seeing the formatted transcript in the output panel.
